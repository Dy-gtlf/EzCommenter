#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ezcommenter:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

io.on('connection', (socket) => {
  io.to(socket.id).emit('syncCommentLog', commentLog); // 今までのコメントを取得
  socket.on('comment', (comment) => {
    var df = (new Date() - start) / 1000; // サーバ開始からの経過時間(秒)
    var h = Math.floor(df / 3600); // 時間
    var m = Math.floor(df % 3600 / 60); // 分
    var s = Math.floor(df % 60); // 秒
    var time = hhmmss(h, m, s); // 表示形式に変換
    io.emit('comment', comment, time); // 全クライアントへイベントの通知
    commentLog.push({
        time: time,
        comment: comment
    });

  });
});

// サーバの開始時間
var start = new Date();

// 経過時間のフォーマットを指定
function hhmmss(h, m, s) {
  var h0 = ('00' + h).slice(-2);
  var m0 = ('00' + m).slice(-2);
  var s0 = ('00' + s).slice(-2);
  return `${h0}:${m0}:${s0}`;
}

var commentLog = [];